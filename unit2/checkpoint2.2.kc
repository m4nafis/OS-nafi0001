//Xemag65 Kernal Development Template
//Each function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")
//Some definitions of address and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

//Some text to display
char[] MESSAGE = "nafi0001";

void main() {

}

//Here are a couple sample SYSCALL handlers that just display a character on the screen 
void syscall00(){
}

void syscall01(){
  *(SCREEN+79) = ')';
}

void syscall02(){
  *(SCREEN+78) = '(';
}

void syscall03(){
}

void syscall04(){
}

void syscall05(){
}

void syscall06(){
}

void syscall07(){
}

void syscall08(){
}

void syscall09(){
}

void syscall0A(){
}

void syscall0B(){
}

void syscall0C(){
}

void syscall0D(){
}

void syscall0E(){
}

void syscall0F(){
}

void syscall10(){
}

void securentr(){
}

void securexit(){
}

void syscall13(){
}

void syscall14(){
}

void syscall15(){
}

void syscall16(){
}

void syscall17(){
}

void syscall18(){
}

void syscall19(){
}

void syscall1A(){
}

void syscall1B(){
}

void syscall1C(){
}

void syscall1D(){
}

void syscall1E(){
}

void syscall1F(){
}

void syscall20(){
}

void syscall21(){
}

void syscall22(){
}

void syscall23(){
}

void syscall24(){
}

void syscall25(){
}

void syscall26(){
}

void syscall27(){
}

void syscall28(){
}

void syscall29(){
}

void syscall2A(){
}

void syscall2B(){
}

void syscall2C(){
}

void syscall2D(){
}

void syscall2E(){
}

void syscall2F(){
}

void syscall30(){
}

void syscall31(){
}

void syscall32(){
}

void syscall33(){
}

void syscall34(){
}

void syscall35(){
}

void syscall36(){
}

void syscall37(){
}

void syscall38(){
}

void syscall39(){
}

void syscall3A(){
}

void syscall3B(){
}

void syscall3C(){
}

void syscall3D(){
}

void syscall3E(){
}

void syscall3F(){
}

void reset(){

  //Initialize screen memory, and select correct font
  *VIC_MEMORY = 0x14;
  //Fill the screen with spaces
  memset(SCREEN, ' ', 40*25);
  //Set the colour of every character on the screen to white
  memset(COLS, WHITE, 40*25);
  //Print the 'Hello world' message
  char* sc = SCREEN+40; //Display it one line douwn on the screen
  char* msg = MESSAGE; //The message to display
  //A simple copy routine to copy the string
  while(*msg) {
    *sc++ = *msg++;
  }
  // Loop forever showing two white lines as raster bars
  while(true) {
    if(*RASTER==54 || *RASTER==66) {
      *BGCOL = WHITE;
    } else {
      *BGCOL = BLACK;
    }
  }
}

void pagfault(){
}

void restorkey(){
}

void alttabkey(){
}

void vf011rd(){
}

void vf011wr(){
}

void reserved(){
}

void cpukil(){
}

//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The structure of each entry point JMP (handler address) + NOP.

struct SysCall {
  char xjmp;
  void()* syscall;
  char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
  { JMP, &syscall00, NOP },
  { JMP, &syscall01, NOP },
  { JMP, &syscall02, NOP },
  { JMP, &syscall03, NOP },
  { JMP, &syscall04, NOP },
  { JMP, &syscall05, NOP },
  { JMP, &syscall06, NOP },
  { JMP, &syscall07, NOP },
  { JMP, &syscall08, NOP },
  { JMP, &syscall09, NOP },
  { JMP, &syscall0A, NOP },
	{ JMP, &syscall0B, NOP },
	{ JMP, &syscall0C, NOP },
	{ JMP, &syscall0D, NOP },
	{ JMP, &syscall0E, NOP },
	{ JMP, &syscall0F, NOP },
	{ JMP, &syscall10, NOP },
	{ JMP, &securentr, NOP },
	{ JMP, &securexit, NOP },
	{ JMP, &syscall13, NOP },
	{ JMP, &syscall14, NOP },
	{ JMP, &syscall15, NOP },
	{ JMP, &syscall16, NOP },
	{ JMP, &syscall17, NOP },
	{ JMP, &syscall18, NOP },
	{ JMP, &syscall19, NOP },
	{ JMP, &syscall1A, NOP },
	{ JMP, &syscall1B, NOP },
	{ JMP, &syscall1C, NOP },
	{ JMP, &syscall1D, NOP },
	{ JMP, &syscall1E, NOP },
	{ JMP, &syscall1F, NOP },
	{ JMP, &syscall20, NOP },
	{ JMP, &syscall21, NOP },
	{ JMP, &syscall22, NOP },
	{ JMP, &syscall23, NOP },
	{ JMP, &syscall24, NOP },
	{ JMP, &syscall25, NOP },
	{ JMP, &syscall26, NOP },
	{ JMP, &syscall27, NOP },
	{ JMP, &syscall28, NOP },
	{ JMP, &syscall29, NOP },
	{ JMP, &syscall2A, NOP },
	{ JMP, &syscall2B, NOP },
	{ JMP, &syscall2C, NOP },
	{ JMP, &syscall2D, NOP },
	{ JMP, &syscall2E, NOP },
	{ JMP, &syscall2F, NOP },
	{ JMP, &syscall30, NOP },
	{ JMP, &syscall31, NOP },
	{ JMP, &syscall32, NOP },
	{ JMP, &syscall33, NOP },
	{ JMP, &syscall34, NOP },
	{ JMP, &syscall35, NOP },
	{ JMP, &syscall36, NOP },
	{ JMP, &syscall37, NOP },
	{ JMP, &syscall38, NOP },
	{ JMP, &syscall39, NOP },
	{ JMP, &syscall3A, NOP },
	{ JMP, &syscall3B, NOP },
	{ JMP, &syscall3C, NOP },
	{ JMP, &syscall3D, NOP },
	{ JMP, &syscall3E, NOP },
	{ JMP, &syscall3F, NOP }
};

export align(0x100) struct SysCall[] TRAPS = {
  {JMP, &reset, NOP},
  {JMP, &pagfault, NOP},
  {JMP, &restorkey, NOP},
  {JMP, &alttabkey, NOP},
  {JMP, &vf011rd, NOP},
  {JMP, &vf011wr, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &cpukil, NOP}
  
};
