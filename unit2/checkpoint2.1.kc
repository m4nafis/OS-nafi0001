//Xemag65 Kernal Development Template
//Each function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")
//Some definitions of address and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

//Some text to display
char[] MESSAGE = "nafi0001";

void main() {
  //Initialize screen memory, and select correct font
  *VIC_MEMORY = 0x14;
  //Fill the screen with spaces
  memset(SCREEN, ' ', 40*25);
  //Set the colour of every character on the screen to white
  memset(COLS, WHITE, 40*25);
  //Print the 'Hello world' message
  char* sc = SCREEN+40; //Display it one line douwn on the screen
  char* msg = MESSAGE; //The message to display
  //A simple copy routine to copy the string
  while(*msg) {
    *sc++ = *msg++;
  }
  // Loop forever showing two white lines as raster bars
  while(true) {
    if(*RASTER==54 || *RASTER==66) {
      *BGCOL = WHITE;
    } else {
      *BGCOL = BLACK;
    }
  }
}

//Here are a couple sample SYSCALL handlers that just display a character on the screen 
void syscall1(){
  *(SCREEN+79) = ')';
}

void syscall2(){
  *(SCREEN+78) = '(';
}

//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The structure of each entry point JMP (handler address) + NOP.

struct SysCall {
  char xjmp;
  void()* syscall;
  char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
  { JMP, &syscall1, NOP },
  { JMP, &syscall2, NOP }
};


export align(0x100) struct SysCall[] SYSCALL_RESET = {
  {JMP, &main, NOP}
};
