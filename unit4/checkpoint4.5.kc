//Xemag65 Kernal Development Template
//Each function of the kernal is a no-args function
//The functions are placed in the SYSCALLS table surrounded by JMP and NOP

import "string"

//Use a linker definition file (put the previous listing into that file)
#pragma link("mega65hyper.ld")
//Some definitions of address and special values that this program uses
const char* RASTER = 0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;

//Some text to display
char[] MESSAGE = "checkpoint 4.3 nafi0001";

void main() {

}

//Here are a couple sample SYSCALL handlers that just display a character on the screen 
void syscall00(){
print_newline();
print_to_screen("syscall00 entered");
exit_hypervisor();
}

void syscall01(){
  //*(SCREEN+79) = ')';
  print_newline();
  print_to_screen("syscall01 entered");
  exit_hypervisor();
}

void syscall02(){
  //*(SCREEN+78) = '(';
  print_newline();
  print_to_screen((char*)$0300);
  exit_hypervisor();
}

void syscall03(){
(char *)os_version = "nafi 1.0";
unsigned char *p = $0300;

while(p<=$03FF){
*p = *os_version;

os_version++;
p++;
}
exit_hypervisor();
}

void syscall04(){
exit_hypervisor();
}

void syscall05(){
exit_hypervisor();
}

void syscall06(){
exit_hypervisor();
}

void syscall07(){
exit_hypervisor();
}

void syscall08(){
exit_hypervisor();
}

void syscall09(){
exit_hypervisor();
}

void syscall0A(){
exit_hypervisor();
}

void syscall0B(){
exit_hypervisor();
}

void syscall0C(){
exit_hypervisor();
}

void syscall0D(){
exit_hypervisor();
}

void syscall0E(){
exit_hypervisor();
}

void syscall0F(){
exit_hypervisor();
}

void syscall10(){
exit_hypervisor();
}

void securentr(){
exit_hypervisor();
}

void securexit(){
exit_hypervisor();
}

void syscall13(){
exit_hypervisor();
}

void syscall14(){
exit_hypervisor();
}

void syscall15(){
exit_hypervisor();
}

void syscall16(){
exit_hypervisor();
}

void syscall17(){
exit_hypervisor();
}

void syscall18(){
exit_hypervisor();
}

void syscall19(){
exit_hypervisor();
}

void syscall1A(){
exit_hypervisor();
}

void syscall1B(){
exit_hypervisor();
}

void syscall1C(){
exit_hypervisor();
}

void syscall1D(){
exit_hypervisor();
}

void syscall1E(){
exit_hypervisor();
}

void syscall1F(){
exit_hypervisor();
}

void syscall20(){
exit_hypervisor();
}

void syscall21(){
exit_hypervisor();
}

void syscall22(){
exit_hypervisor();
}

void syscall23(){
exit_hypervisor();
}

void syscall24(){
exit_hypervisor();
}

void syscall25(){
exit_hypervisor();
}

void syscall26(){
exit_hypervisor();
}

void syscall27(){
exit_hypervisor();
}

void syscall28(){
exit_hypervisor();
}

void syscall29(){
exit_hypervisor();
}

void syscall2A(){
exit_hypervisor();
}

void syscall2B(){
exit_hypervisor();
}

void syscall2C(){
exit_hypervisor();
}

void syscall2D(){
exit_hypervisor();
}

void syscall2E(){
exit_hypervisor();
}

void syscall2F(){
exit_hypervisor();
}

void syscall30(){
exit_hypervisor();
}

void syscall31(){
exit_hypervisor();
}

void syscall32(){
exit_hypervisor();
}

void syscall33(){
exit_hypervisor();
}

void syscall34(){
exit_hypervisor();
}

void syscall35(){
exit_hypervisor();
}

void syscall36(){
exit_hypervisor();
}

void syscall37(){
exit_hypervisor();
}

void syscall38(){
exit_hypervisor();
}

void syscall39(){
exit_hypervisor();
}

void syscall3A(){
exit_hypervisor();
}

void syscall3B(){
exit_hypervisor();
}

void syscall3C(){
exit_hypervisor();
}

void syscall3D(){
exit_hypervisor();
}

void syscall3E(){
exit_hypervisor();
}

void syscall3F(){
exit_hypervisor();
}

void exit_hypevisor(){
*(unsigned char *)$D67F = $01;}

void start_simple_program(){
*(unsigned char *)$0300 = $80;
*(unsigned char *)$0301 = $00;
*(unsigned char *)$0302 = $81;
*(unsigned char *)$0303 = $00;
*(unsigned char *)$0304 = $00;
*(unsigned char *)$0305 = $00;
*(unsigned char *)$0306 = $00;
*(unsigned char *)$0307 = $60;
*(unsigned char *)$0308 = $02;
*(unsigned char *)$0309 = $00;
*(unsigned char *)$030A = $02;
*(unsigned char *)$030B = $01;
*(unsigned char *)$030C = $08;
*(unsigned char *)$030D = $00;
*(unsigned char *)$030E = $00;
*(unsigned char *)$030F = $00;
*(unsigned char *)$0310 = $60;
*(unsigned char *)$D701 = $03;
*(unsigned char *)$D702 = $00;
*(unsigned char *)$D705 = $00;
*(unsigned short *)$D648 = $080D;
exit_hypervisor();
}

volatile unsigned char* current_screen_line;
volatile unsigned char current_screen_x;

void print_to_screen(char* message){

char* z= message;
while(*z) {
current_screen_line[current_screen_x] = *z;
current_screen_x++;
*z++;
}
}

void print_newline(){
current_screen_line = current_screen_line + 40;
current_screen_x = 0;
}

void reset(){

current_screen_line = $0400;
current_screen_x = 0;

  //Initialize screen memory, and select correct font
  *VIC_MEMORY = 0x14;
  //Fill the screen with spaces
  memset(SCREEN, ' ', 40*25);
  //Set the colour of every character on the screen to white
  memset(COLS, WHITE, 40*25);
  //Print the 'Hello world' message
  /*char* sc = SCREEN+40; //Display it one line douwn on the screen
  char* msg = MESSAGE; //The message to display
  //A simple copy routine to copy the string
  while(*msg) {
    *sc++ = *msg++;
  }
  // Loop forever showing two white lines as raster bars
  
  while(true) {
    if(*RASTER==54 || *RASTER==66) {
      *BGCOL = WHITE;
    } else {
      *BGCOL = BLACK;
    }
  } */
  print_to_screen(MESSAGE);
  print_newline();
  start_simple_program();
  exit_hypervisor();
}



void pagfault(){
exit_hypervisor();
}

void restorkey(){
exit_hypervisor();
}

void alttabkey(){
exit_hypervisor();
}

void vf011rd(){
exit_hypervisor();
}

void vf011wr(){
exit_hypervisor();
}

void reserved(){
exit_hypervisor();
}

void cpukil(){
exit_hypervisor();
}

//Now we select the SYSCALL segment to hold the SYSCALL/trap entry point table.
#pragma data_seg(Syscall)

//The structure of each entry point JMP (handler address) + NOP.

struct SysCall {
  char xjmp;
  void()* syscall;
  char xnop;
};

const char JMP = 0x4c;
const char NOP = 0xea;

export struct SysCall[] SYSCALLS = {
  { JMP, &syscall00, NOP },
  { JMP, &syscall01, NOP },
  { JMP, &syscall02, NOP },
  { JMP, &syscall03, NOP },
  { JMP, &syscall04, NOP },
  { JMP, &syscall05, NOP },
  { JMP, &syscall06, NOP },
  { JMP, &syscall07, NOP },
  { JMP, &syscall08, NOP },
  { JMP, &syscall09, NOP },
  { JMP, &syscall0A, NOP },
	{ JMP, &syscall0B, NOP },
	{ JMP, &syscall0C, NOP },
	{ JMP, &syscall0D, NOP },
	{ JMP, &syscall0E, NOP },
	{ JMP, &syscall0F, NOP },
	{ JMP, &syscall10, NOP },
	{ JMP, &securentr, NOP },
	{ JMP, &securexit, NOP },
	{ JMP, &syscall13, NOP },
	{ JMP, &syscall14, NOP },
	{ JMP, &syscall15, NOP },
	{ JMP, &syscall16, NOP },
	{ JMP, &syscall17, NOP },
	{ JMP, &syscall18, NOP },
	{ JMP, &syscall19, NOP },
	{ JMP, &syscall1A, NOP },
	{ JMP, &syscall1B, NOP },
	{ JMP, &syscall1C, NOP },
	{ JMP, &syscall1D, NOP },
	{ JMP, &syscall1E, NOP },
	{ JMP, &syscall1F, NOP },
	{ JMP, &syscall20, NOP },
	{ JMP, &syscall21, NOP },
	{ JMP, &syscall22, NOP },
	{ JMP, &syscall23, NOP },
	{ JMP, &syscall24, NOP },
	{ JMP, &syscall25, NOP },
	{ JMP, &syscall26, NOP },
	{ JMP, &syscall27, NOP },
	{ JMP, &syscall28, NOP },
	{ JMP, &syscall29, NOP },
	{ JMP, &syscall2A, NOP },
	{ JMP, &syscall2B, NOP },
	{ JMP, &syscall2C, NOP },
	{ JMP, &syscall2D, NOP },
	{ JMP, &syscall2E, NOP },
	{ JMP, &syscall2F, NOP },
	{ JMP, &syscall30, NOP },
	{ JMP, &syscall31, NOP },
	{ JMP, &syscall32, NOP },
	{ JMP, &syscall33, NOP },
	{ JMP, &syscall34, NOP },
	{ JMP, &syscall35, NOP },
	{ JMP, &syscall36, NOP },
	{ JMP, &syscall37, NOP },
	{ JMP, &syscall38, NOP },
	{ JMP, &syscall39, NOP },
	{ JMP, &syscall3A, NOP },
	{ JMP, &syscall3B, NOP },
	{ JMP, &syscall3C, NOP },
	{ JMP, &syscall3D, NOP },
	{ JMP, &syscall3E, NOP },
	{ JMP, &syscall3F, NOP }
};

export align(0x100) struct SysCall[] TRAPS = {
  {JMP, &reset, NOP},
  {JMP, &pagfault, NOP},
  {JMP, &restorkey, NOP},
  {JMP, &alttabkey, NOP},
  {JMP, &vf011rd, NOP},
  {JMP, &vf011wr, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &reserved, NOP},
  {JMP, &cpukil, NOP}
  
  
};

void exit_hypervisor()
{
//Trigger exit from hypervisor mode
*(unsigned char*)$D67F = $01;
}